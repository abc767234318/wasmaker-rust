#[repr(u32)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum OpCode {
    Unreachable = 0x00,
    Nop         = 0x01,
    Block       = 0x02,
    Loop        = 0x03,
    If          = 0x04,
    Else_       = 0x05,

    End_         = 0x0B,
    Br           = 0x0C,
    BrIf         = 0x0D,
    BrTable      = 0x0E,
    Return       = 0x0F,
    Call         = 0x10,
    CallIndirect = 0x11,

    Drop    = 0x1A,
    Select  = 0x1B,
    SelectT = 0x1C,

    LocalGet  = 0x20,
    LocalSet  = 0x21,
    LocalTee  = 0x22,
    GlobalGet = 0x23,
    GlobalSet = 0x24,
    TableGet  = 0x25,
    TableSet  = 0x26,

    I32Load    = 0x28,
    I64Load    = 0x29,
    F32Load    = 0x2A,
    F64Load    = 0x2B,
    I32Load8S  = 0x2C,
    I32Load8U  = 0x2D,
    I32Load16S = 0x2E,
    I32Load16U = 0x2F,
    I64Load8S  = 0x30,
    I64Load8U  = 0x31,
    I64Load16S = 0x32,
    I64Load16U = 0x33,
    I64Load32S = 0x34,
    I64Load32U = 0x35,
    I32Store   = 0x36,

    Unknown(u32),
}

impl OpCode {

    pub fn from_u32(value:u32)-> Self {
        match value {
            0x00 => OpCode::Unreachable,
            0x01 => OpCode::Nop,
            0x02 => OpCode::Block,
            0x03 => OpCode::Loop,
            0x04 => OpCode::If,
            0x05 => OpCode::Else_,
            0x0B => OpCode::End_,
            0x0C => OpCode::Br,
            0x0D => OpCode::BrIf,
            0x0E => OpCode::BrTable,
            0x0F => OpCode::Return,
            0x10 => OpCode::Call,
            0x11 => OpCode::CallIndirect,
            0x1A => OpCode::Drop,
            0x1B => OpCode::Select,
            0x1C => OpCode::SelectT,
            0x20 => OpCode::LocalGet,
            0x21 => OpCode::LocalSet,
            0x22 => OpCode::LocalTee,
            0x23 => OpCode::GlobalGet,
            0x24 => OpCode::GlobalSet,
            0x25 => OpCode::TableGet,
            0x26 => OpCode::TableSet,
            0x28 => OpCode::I32Load,
            0x29 => OpCode::I64Load,
            0x2A => OpCode::F32Load,
            0x2B => OpCode::F64Load,
            0x2C => OpCode::I32Load8S,
            0x2D => OpCode::I32Load8U,
            0x2E => OpCode::I32Load16S,
            0x2F => OpCode::I32Load16U,
            0x30 => OpCode::I64Load8S,
            0x31 => OpCode::I64Load8U,
            0x32 => OpCode::I64Load16S,
            0x33 => OpCode::I64Load16U,
            0x34 => OpCode::I64Load32S,
            0x35 => OpCode::I64Load32U,
            0x36 => OpCode::I32Store,

            _ => OpCode::Unknown(value),
        }
    }

    pub fn name(&self) -> String {
        match self {
            OpCode::Unreachable => "unreachable".to_string(),
            OpCode::Nop         => "nop".to_string(),
            OpCode::Block       => "block".to_string(),
            OpCode::Loop        => "loop".to_string(),
            OpCode::If          => "if".to_string(),
            OpCode::Else_       => "else".to_string(),
            OpCode::End_        => "end".to_string(),
            OpCode::Br          => "br".to_string(),
            OpCode::BrIf        => "br_if".to_string(),
            OpCode::BrTable     => "br_table".to_string(),
            OpCode::Return      => "return".to_string(),
            OpCode::Call        => "call".to_string(),
            OpCode::CallIndirect=> "call_indirect".to_string(),
            OpCode::Drop        => "drop".to_string(),
            OpCode::Select      => "select".to_string(),
            OpCode::SelectT     => "select_t".to_string(),
            OpCode::LocalGet   => "local.get".to_string(),
            OpCode::LocalSet   => "local.set".to_string(),
            OpCode::LocalTee   => "local.tee".to_string(),
            OpCode::GlobalGet  => "global.get".to_string(),
            OpCode::GlobalSet  => "global.set".to_string(),
            OpCode::TableGet   => "table.get".to_string(),
            OpCode::TableSet   => "table.set".to_string(),
            OpCode::I32Load    => "i32.load".to_string(),
            OpCode::I64Load    => "i64.load".to_string(),
            OpCode::F32Load    => "f32.load".to_string(),
            OpCode::F64Load    => "f64.load".to_string(),
            OpCode::I32Load8S  => "i32.load8_s".to_string(),
            OpCode::I32Load8U  => "i32.load8_u".to_string(),
            OpCode::I32Load16S => "i32.load16_s".to_string(),
            OpCode::I32Load16U => "i32.load16_u".to_string(),
            OpCode::I64Load8S  => "i32.load8_s".to_string(),
            OpCode::I64Load8U  => "i32.load8_u".to_string(),
            OpCode::I64Load16S => "i32.load16_s".to_string(),
            OpCode::I64Load16U => "i32.load16_u".to_string(),
            OpCode::I64Load32S => "i32.load32_s".to_string(),
            OpCode::I64Load32U => "i32.load32_u".to_string(),
            OpCode::I32Store   => "i32.store".to_string(),
            OpCode::Unknown(value) => format!("unknown(0x{:04x})", value),
        }
    }
}

